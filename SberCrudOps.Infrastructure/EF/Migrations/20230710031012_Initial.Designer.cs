// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SberCrudOps.Infrastructure.EF.Contexts;

#nullable disable

namespace SberCrudOps.Infrastructure.EF.Migrations
{
    [DbContext(typeof(SberOperationDbContext))]
    [Migration("20230710031012_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SberCrudOps.Domain.Aggregates.SberOperationAggregate.Entities.SberOperationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("AddedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Added")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Deleted")
                        .HasColumnOrder(3);

                    b.Property<string>("InformationText")
                        .HasColumnType("text")
                        .HasColumnName("Information")
                        .HasColumnOrder(4);

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("SberOperationInfo");
                });

            modelBuilder.Entity("SberCrudOps.Domain.Aggregates.SberOperationAggregate.SberOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("AddedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Added")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("CompletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Completed")
                        .HasColumnOrder(6);

                    b.Property<int?>("IdSource")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.Property<string>("InformationText")
                        .HasColumnType("text")
                        .HasColumnName("Information")
                        .HasColumnOrder(3);

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("_typeWork")
                        .HasColumnType("integer")
                        .HasColumnName("TypeWork")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("IdSource")
                        .IsUnique();

                    b.ToTable("SberOperations", (string)null);
                });

            modelBuilder.Entity("SberCrudOps.Domain.Aggregates.SberOperationAggregate.SberOperation", b =>
                {
                    b.HasOne("SberCrudOps.Domain.Aggregates.SberOperationAggregate.Entities.SberOperationInfo", "_sberOperationInfo")
                        .WithOne()
                        .HasForeignKey("SberCrudOps.Domain.Aggregates.SberOperationAggregate.SberOperation", "IdSource")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("_sberOperationInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
